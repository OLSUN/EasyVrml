package com.bxh.easyvrml.node.basic;

import com.bxh.easyvrml.impl.Texture;

public class PixelTexture implements Texture {

	private int[]		image;			//用 SFImage 格式定义二维纹理图①纹理图形的宽度，单位是像素；②纹理图形的高度，单位是像素；③表示纹
										//理图形的每个像素的一个特征数值，可以取 0、1、2、3、4 五个数值，每个数值表达了不同的
										//含义
										/*
										 * =====特征值含义=============================================================================
										 * 
										0  不对造型添加像素纹理 --------------------------------------------------------------------------
										|每个像素用一个 16 位字节描述，意味着添加一元像素图。在 0X00（黑色）到白色（0XFF）范				   |
										|围内变化																					   |
										1----------------------------------------------------------------------------------------------
										|例如：0X00（黑色）、0X80（50%灰色）、0XFF（白色）  											   |
										|每个像素用两个 16 位字节描述，意味着添加双元像素图，其中一个 16 位字节表示单灰度，在				   |
										|0X00（黑色）到白色（0XFF）范围内变化；另一个 16 位字节表示透明度，在透明（0X00）到不				   |
										|透明（0XFF）范围内变化																		   |
										2----------------------------------------------------------------------------------------------
										|例如：0X0000 （黑色、透明）， 0X00FF （黑色、不透明）0X0080 （黑色、半透明）， 0X8080 （灰		   |
										|色、半透明）																				   |
										|每个像素用三个 16 位字节描述，意味着添加三元像素图，实际上三元像素图提供了 RGB 三原				   |
										|色表示。其中第一个字节表示红色、第二个字节表示绿色、第三个字节表示蓝色；每个字节变化				   |
										|从最低（0X00）到最高（0XFF） 。由于三个字节相连，通常称红色是高字节，绿色是中字节，蓝			   |
										|色是低字节																					   |
										3----------------------------------------------------------------------------------------------
										|例如：0X000000（黑色），0XFF0000（红色），0X00FF00（绿色），0X0000FF（蓝色）					   |
										|每个像素用四个 16 位字节描述，意味着添加四元像素图，第一个字节表示红色、第二个字节表示			   |
										|绿色、第三个字节表示蓝色，最后一个字节表示透明度。每组变化均从最低（ 0X00）到最高（0XFF）。		   |
										|相对应的，可以称红色是高字节，绿色是中字节，蓝色是中低字节，透明度为最低的字节					   |
										4----------------------------------------------------------------------------------------------
										|例如：0X00000000 （黑色、透明）， 0XFF0000FF （红色、不透明）， 0XFFFFFFFF （白色、不透明） 		   |
										 ---------------------------------------------------------------------------------------------- */
										
	private boolean   repeatS;			//这个域值指明在纹理坐标 S 方向上的纹理映射是否会重复填满整个几何造型的表面
	
	private boolean   repeatT;			//这个域值指明在纹理坐标 T 方向上的纹理映射是否会重复填满整个几何造型的表面

	public PixelTexture() {}

	public PixelTexture(int[] image, boolean repeatS, boolean repeatT) {
		super();
		this.image = image;
		this.repeatS = repeatS;
		this.repeatT = repeatT;
	}

	public int[] getImage() {
		return image;
	}

	public void setImage(int[] image) {
		this.image = image;
	}

	public boolean isRepeatS() {
		return repeatS;
	}

	public void setRepeatS(boolean repeatS) {
		this.repeatS = repeatS;
	}

	public boolean isRepeatT() {
		return repeatT;
	}

	public void setRepeatT(boolean repeatT) {
		this.repeatT = repeatT;
	}
}
